---
# Kubernetes Cluster Setup Playbook
# This playbook sets up a Kubernetes cluster with one control plane and multiple worker nodes

# Common Setup - Prepares all nodes with prerequisites
- hosts: all
  become: true
  vars:
    # Kubernetes repository settings
    k8s_version: "v1.32"  # Update this when upgrading Kubernetes
    k8s_url_apt_key: "https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/Release.key"
    k8s_gpgpath: "/usr/share/keyrings/kubernetes-apt-keyring.gpg"
    k8s_repository: "https://pkgs.k8s.io/core:/stable:/{{ k8s_version }}/deb/"
    
    # Network configuration
    pod_network_cidr: "10.244.0.0/16"  # CIDR for Flannel

  tasks:
    # =========== System Prerequisites ===========
    - name: Install necessary system packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg2
          - net-tools
          - jq

    # =========== Container Runtime Setup ===========
    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted
        enabled: true

    # =========== Kernel Configuration ===========
    - name: Configure required kernel modules
      blockinfile:
        create: true
        path: /etc/modules-load.d/containerd.conf
        block: |
          overlay
          br_netfilter

    - name: Load kernel modules immediately
      shell: |
        modprobe overlay
        modprobe br_netfilter

    # =========== Disable Swap (Required for Kubernetes) ===========
    - name: Remove swap entries from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap immediately
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    # =========== Network Configuration ===========
    - name: Configure kernel parameters for Kubernetes networking
      blockinfile:
        create: true
        path: /etc/sysctl.d/99-kubernetes-cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl parameters without reboot
      command: sysctl --system

    # =========== Kubernetes Components Installation ===========
    - name: Add Kubernetes GPG key
      shell: curl -fsSL {{ k8s_url_apt_key }} | gpg --dearmor -o {{ k8s_gpgpath }}
      args:
        creates: "{{ k8s_gpgpath }}"

    - name: Add Kubernetes repository
      apt_repository:
        filename: kubernetes
        repo: "deb [signed-by={{ k8s_gpgpath }}] {{ k8s_repository }} /"

    - name: Install Kubernetes components
      apt: 
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Hold Kubernetes packages at installed version
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        daemon_reload: true
        state: started
        enabled: true

    # =========== Import HPL benchmark container image into k8s.io namespace ===========
    - name: Copy hpl-benchmark.tar from host to VM
      copy:
        src: ../hpl/hpl-benchmark.tar  # path on your host machine
        dest: /tmp/hpl-benchmark.tar  # target path on the VM
        mode: '0644'

    - name: Import image into containerd
      command: ctr -n=k8s.io images import /tmp/hpl-benchmark.tar      


# ========================================================================================
# Control Plane Setup - Initializes the Kubernetes control plane node
# ========================================================================================
- name: Configure Kubernetes Control Plane
  hosts: control
  become: true
  vars:
    pod_network_cidr: "10.244.0.0/16"  # Match the CIDR for Flannel
    flannel_manifest_url: "https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml"

  tasks:
    - name: Initialize Kubernetes cluster with kubeadm
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      #register: kubeadm_init_result

    - name: Create .kube directory for vagrant user
      file:
        path: /home/vagrant/.kube
        state: directory
        owner: vagrant
        group: vagrant
        mode: '0755'

    - name: Copy admin.conf to user's .kube directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes
        owner: vagrant
        group: vagrant
        mode: '0644'
    - name: Fetch the kubeconfig file to the local machine
      fetch:
        src: /home/vagrant/.kube/config
        dest: ./playground_kubeconfig.yaml
        flat: yes # This ensures the file is copied directly to the dest path without creating the remote directory structure

    # =========== Install Flannel CNI Plugin ===========
    - name: Download Flannel manifest
      get_url:
        url: "https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml"
        dest: /tmp/kube-flannel.yml
        mode: '0644'
      register: flannel_download

    - name: Install Flannel network plugin
      shell: kubectl apply -f /tmp/kube-flannel.yml
      become: false  # Run as regular user, not root
      environment:
        KUBECONFIG: /home/vagrant/.kube/config
      register: flannel_install_result
      when: flannel_download is succeeded

    - name: Show Flannel installation result
      debug:
        var: flannel_install_result.stdout_lines
      when: flannel_install_result is defined


    # =========== Generate Join Command for Workers ===========
    - name: Generate node join command
      command: kubeadm token create --print-join-command
      register: join_command
  
    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"
      become: false  # Explicitly disable privilege escalation for local action

# ========================================================================================
# Worker Nodes Setup - Joins worker nodes to the Kubernetes cluster
# ========================================================================================
- name: Configure Kubernetes Worker Nodes
  hosts: workers
  become: true

  tasks:
    - name: Copy join command to worker nodes
      copy: 
        src: join-command 
        dest: /tmp/join-command.sh 
        mode: 0777
  
    - name: Join worker nodes to the cluster
      command: sh /tmp/join-command.sh
      register: join_result

    - name: Display join result
      debug:
        var: join_result.stdout_lines

    # Optional: Clean up the join command file
    - name: Remove join command file
      file:
        path: /tmp/join-command.sh
        state: absent